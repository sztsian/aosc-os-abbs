From 97ce7535124aff6a576bc748260ce6fa4ab781d8 Mon Sep 17 00:00:00 2001
From: Elvis Angelaccio <elvis.angelaccio@kde.org>
Date: Fri, 7 Jul 2017 11:29:19 +0200
Subject: [PATCH] Fix build with Qt 5.9.1 and clang

Summary:
Qt 5.9.1 expands Q_REQUIRED_RESULT to the `[[nodiscard]]` attribute (see
commit d254d8c19 in qtbase). This breaks the build with clang compilers
because `[[nodiscard]]` cannot be used at the end of a function
declaration:

    error: 'nodiscard' attribute cannot be applied to types

For the record, GCC just issues a 'attribute ignored' warning when
`[[nodiscard]]` is used at the end of a declaration.

Test Plan: ki18n now builds with clang + Qt 5.9.1

Reviewers: #frameworks

Tags: #frameworks

Differential Revision: https://phabricator.kde.org/D6547
---
 src/klocalizedstring.h | 72 +++++++++++++++++++++++++-------------------------
 1 file changed, 36 insertions(+), 36 deletions(-)

diff --git a/src/klocalizedstring.h b/src/klocalizedstring.h
index eff6bf9..33a4c5d 100644
--- a/src/klocalizedstring.h
+++ b/src/klocalizedstring.h
@@ -163,7 +163,7 @@ class KI18N_EXPORT KLocalizedString
      *
      * \return finalized translation
      */
-    QString toString() const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT QString toString() const;
 
     /**
      * Like \c toString, but look for translation only in given languages.
@@ -175,7 +175,7 @@ class KI18N_EXPORT KLocalizedString
      * \param languages list of language codes (by decreasing priority)
      * \return finalized translation
      */
-    QString toString(const QStringList &languages) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT QString toString(const QStringList &languages) const;
 
 #if 0 // until locale system is ready
     /**
@@ -198,7 +198,7 @@ class KI18N_EXPORT KLocalizedString
      * \param domain the translation domain
      * \return finalized translation
      */
-    QString toString(const char *domain) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT QString toString(const char *domain) const;
 
     /**
      * Like \c toString, but resolve KUIT markup into given visual format.
@@ -211,7 +211,7 @@ class KI18N_EXPORT KLocalizedString
      * \param format the target visual format
      * \return finalized translation
      */
-    QString toString(Kuit::VisualFormat format) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT QString toString(Kuit::VisualFormat format) const;
 
     /**
      * Indicate to look for translation only in given languages.
@@ -219,7 +219,7 @@ class KI18N_EXPORT KLocalizedString
      * \param languages list of language codes (by decreasing priority)
      * \return updated \c KLocalizedString
      */
-    KLocalizedString withLanguages(const QStringList &languages) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString withLanguages(const QStringList &languages) const;
 
 #if 0 // until locale system is ready
     /**
@@ -237,7 +237,7 @@ class KI18N_EXPORT KLocalizedString
      * \param domain the translation domain
      * \return updated \c KLocalizedString
      */
-    KLocalizedString withDomain(const char *domain) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString withDomain(const char *domain) const;
 
     /**
      * Indicate to resolve KUIT markup into given visual format.
@@ -247,7 +247,7 @@ class KI18N_EXPORT KLocalizedString
      * \param format the target visual format
      * \return updated \c KLocalizedString
      */
-    KLocalizedString withFormat(Kuit::VisualFormat format) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString withFormat(Kuit::VisualFormat format) const;
 
     /**
      * Substitute an int argument into the message.
@@ -261,8 +261,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(int a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(int a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute an unsigned int argument into the message.
@@ -276,8 +276,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(uint a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(uint a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute a long argument into the message.
@@ -291,8 +291,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(long a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(long a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute an unsigned long argument into the message.
@@ -306,8 +306,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(ulong a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(ulong a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute a long long argument into the message.
@@ -321,8 +321,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(qlonglong a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(qlonglong a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute an unsigned long long argument into the message.
@@ -336,8 +336,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(qulonglong a, int fieldWidth = 0, int base = 10,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(qulonglong a, int fieldWidth = 0, int base = 10,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute a double argument into the message.
@@ -351,9 +351,9 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(double a, int fieldWidth = 0,
-                          char format = 'g', int precision = -1,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(double a, int fieldWidth = 0,
+                                            char format = 'g', int precision = -1,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute a \c QChar argument into the message.
@@ -365,8 +365,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(QChar a, int fieldWidth = 0,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(QChar a, int fieldWidth = 0,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute a \c QString argument into the message.
@@ -378,8 +378,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(const QString &a, int fieldWidth = 0,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(const QString &a, int fieldWidth = 0,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Substitute another \c KLocalizedString into the message.
@@ -391,8 +391,8 @@ class KI18N_EXPORT KLocalizedString
      *                 field width is greater than argument width
      * \return updated \c KLocalizedString
      */
-    KLocalizedString subs(const KLocalizedString &a, int fieldWidth = 0,
-                          QChar fillChar = QLatin1Char(' ')) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString subs(const KLocalizedString &a, int fieldWidth = 0,
+                                            QChar fillChar = QLatin1Char(' ')) const;
 
     /**
      * Add dynamic context to the message.
@@ -403,8 +403,8 @@ class KI18N_EXPORT KLocalizedString
      * \param value context value
      * \return updated \c KLocalizedString
      */
-    KLocalizedString inContext(const QString &key,
-                               const QString &value) const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString inContext(const QString &key,
+                                                 const QString &value) const;
 
     /**
      * Relax matching between placeholders and arguments.
@@ -423,7 +423,7 @@ class KI18N_EXPORT KLocalizedString
      *
      * \return updated \c KLocalizedString
      */
-    KLocalizedString relaxSubs() const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString relaxSubs() const;
 
     /**
      * Do not resolve KUIT markup.
@@ -435,7 +435,7 @@ class KI18N_EXPORT KLocalizedString
      *
      * \return updated \c KLocalizedString
      */
-    KLocalizedString ignoreMarkup() const Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KLocalizedString ignoreMarkup() const;
 
     /**
      * Set the given domain as application's main domain.
@@ -572,7 +572,7 @@ class KI18N_EXPORT KLocalizedString
      *
      * \return path to the localized file if found, original path otherwise
      */
-    static QString localizedFilePath(const QString &filePath) Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT static QString localizedFilePath(const QString &filePath);
 
     /**
      * Remove accelerator marker from a UI text label.
@@ -588,7 +588,7 @@ class KI18N_EXPORT KLocalizedString
      * \param label UI label which may contain an accelerator marker
      * \return label without the accelerator marker
      */
-    static QString removeAcceleratorMarker(const QString &label) Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT static QString removeAcceleratorMarker(const QString &label);
 
     /**
      * Translate a message with Qt semantics.
@@ -605,8 +605,8 @@ class KI18N_EXPORT KLocalizedString
      *             with roundtrip TS->PO->TS through
      *             Qt's \c lupdate and \c lconvert commands.
      */
-    KI18N_DEPRECATED static QString translateQt(const char *context, const char *text,
-                               const char *comment, int n) Q_REQUIRED_RESULT;
+    Q_REQUIRED_RESULT KI18N_DEPRECATED static QString translateQt(const char *context, const char *text,
+                               const char *comment, int n);
 
     /**
      * Add another domain to search for Qt translations.

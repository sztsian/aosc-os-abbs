Description: fix build failures with newer gcc versions
 Trivial fixes.
Author: Laszlo Boszormenyi (GCS) <gcs@debian.org>
Last-Update: 2014-06-25

---

--- libsidplay-1.36.59.orig/acinclude.m4
+++ libsidplay-1.36.59/acinclude.m4
@@ -75,8 +75,10 @@ AC_DEFUN([SID_CHECK_IOS_BIN],
     [
         AC_TRY_COMPILE(
             [
-#include <iostream.h>
-#include <fstream.h>
+#include <iostream>
+#include <fstream>
+
+using namespace std;
             ],
 		    [
 ifstream myTest("test",ios::in|ios::binary);
--- libsidplay-1.36.59.orig/src/pp_.cpp
+++ libsidplay-1.36.59/src/pp_.cpp
@@ -40,6 +40,8 @@ static udword outputLen;
 static bool isCompressed;
 static bool globalError;
 
+using namespace std;
+
 
 // Move four bytes to Motorola big-endian double-word.
 static inline void bytesTOudword()
--- libsidplay-1.36.59.orig/src/sidtune.cpp
+++ libsidplay-1.36.59/src/sidtune.cpp
@@ -35,6 +35,8 @@ using namespace std;
 #include "myendian.h"
 #include "pp.h"
 
+using namespace std;
+
 
 const char text_songNumberExceed[] = "WARNING: Selected song number was too high";
 const char text_emptyFile[] = "ERROR: File is empty";
@@ -307,9 +309,9 @@ udword sidTune::loadFile(const char* fil
     }
     // Open binary input file stream at end of file.
 #if defined(SID_HAVE_IOS_BIN)
-	ifstream myIn( fileName, ios::in|ios::bin|ios::ate );
+	ifstream myIn( fileName, ios::in|ios::bin );
 #else
-	ifstream myIn( fileName, ios::in|ios::binary|ios::ate );
+	ifstream myIn( fileName, ios::in|ios::binary );
 #endif
 	// As a replacement for !is_open(), bad() and the NOT-operator
     // don't seem to work on all systems.
--- libsidplay-1.36.59.orig/src/smart.h
+++ libsidplay-1.36.59/src/smart.h
@@ -17,16 +17,16 @@ class smartPtrBase
         doFree = bufOwner;
         if ( bufferLen >= 1 )
         {
-            pBufCurrent = ( bufBegin = buffer );
-            bufEnd = bufBegin + bufferLen;
-            bufLen = bufferLen;
-            status = true;
+            this->pBufCurrent = ( this->bufBegin = buffer );
+            this->bufEnd = this->bufBegin + bufferLen;
+            this->bufLen = bufferLen;
+            this->status = true;
         }
         else
         {
-            pBufCurrent = ( bufBegin = ( bufEnd = 0 ));
-            bufLen = 0;
-            status = false;
+            this->pBufCurrent = ( this->bufBegin = ( this->bufEnd = 0 ));
+            this->bufLen = 0;
+            this->status = false;
         }
     }
     
